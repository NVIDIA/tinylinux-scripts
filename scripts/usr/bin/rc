#!/usr/bin/sh

# SPDX-License-Identifier: BSD-3-Clause
# SPDX-FileCopyrightText: Copyright (c) 2009-2023, NVIDIA CORPORATION.  All rights reserved.
# See /etc/LICENSE file for details.

__STATUSDIR="/var/rc/status"

# Dummy implementation for scripts which don't need either of these
start()
{
    /usr/bin/true
}
stop()
{
    /usr/bin/true
}

# Helper functions for network services
reachable()
{   
    ping -c 1 -q "$1" 2>&1
}
wait_reachable()
{
    local I
    for I in `seq $2`; do
        reachable "$1" && return 0
        sleep "$I"
    done
    return 1
}

# Get service status
__getstatus()
{
    local __STATUS
    __STATUS="stopped"
    [ -f "$__STATUSDIR/$1" ] && __STATUS=`cat "$__STATUSDIR/$1"`
    echo "$__STATUS"
}

# Start service dependencies
__startdeps()
{
    [ "$DEPENDS" ] || return 0

    local __DEP
    local __STATUS

    for __DEP in $DEPENDS; do
        __STATUS=`__getstatus "$__DEP"`
        if [ "$__STATUS" = "stopped" ]; then
            "/etc/init.d/$__DEP" silentstart || return $?
        fi
    done
}

# Get system uptime, in milliseconds
uptime_ms()
{
    awk '{print $1*1000}' /proc/uptime
}

# Convert time to seconds
time_in_s()
{
    local TIME
    TIME=$(($1/100))
    echo "$(($TIME/10)).$(($TIME%10))"
}

# Functions callable from services to print information on the console
info()
{
    logger -p 24.6 -t "rc.$__SVCNAME" "$@"
    if [ "$LOUDSERVICE" = "1" ]; then
        echo "$@"
    else
        echo -n " $@" >&3
    fi
}
error()
{
    logger -p 24.3 -t "rc.$__SVCNAME" "$@"
    if [ "$LOUDSERVICE" = "1" ]; then
        echo "$@"
    else
        echo -n " $@" >&3
    fi
}

# Start service
__startservice()
{
    local RC
    local START_TIME
    local TIME

    __startdeps || return $?

    START_TIME=$(uptime_ms)

    if [ "$LOUDSERVICE" = "1" ]; then
        start
    else
        echo -n "Starting $__SVCNAME..."
        start 1> >(logger -p 24.6 -t "rc.$__SVCNAME") 2> >(tee >(logger -p 24.4 -t "rc.$__SVCNAME")) 3> >(cat)
    fi
    RC=$?

    if [ $RC -eq 0 ]; then
        echo "$__SVCNAME" >> "$__STATUSDIR/.order"
        echo "started" > "$__STATUSDIR/$__SVCNAME"
    fi

    TIME="$(time_in_s $(($(uptime_ms) - $START_TIME)))"

    if [ "$LOUDSERVICE" = "1" ]; then
        [ $RC -eq 0 ] || echo "Service $__SVCNAME failed to start"
    elif [ $RC -eq 0 ]; then
        echo " OK [${TIME}s]"
        logger -p 24.6 -t "rc.$__SVCNAME" "Started in ${TIME}s"
    else
        echo -e " \033[1;31mFAILED\033[0m [${TIME}s]"
        logger -p 24.3 -t "rc.$__SVCNAME" "Failed after ${TIME}s with exit code $RC"
    fi

    return $RC
}

# Stop service
__stopservice()
{
    local RC

    echo -n "Stopping $__SVCNAME..."
    stop 1> >(logger -p 24.6 -t "rc.$__SVCNAME") 2> >(tee >(logger -p 24.4 -t "rc.$__SVCNAME")) 3> >(cat)
    RC=$?

    if [ $RC -eq 0 ]; then
        sed -i "/^$__SVCNAME\$/d" "$__STATUSDIR/.order"
        echo "stopped" > "$__STATUSDIR/$__SVCNAME"
        echo " OK"
        logger -p 24.6 -t "rc.$__SVCNAME" "Stopped"
    else
        echo -e " \033[1;31mFAILED\033[0m"
        logger -p 24.3 -t "rc.$__SVCNAME" "Failed to stop with exit code $RC"
    fi

    return $RC
}

# Migrate old configuration
__migrate_config()
{
    [ -d /etc_overlay ] && return 0

    [ -f /etc/.migrated ] && return 0

    touch /etc/.migrated

    [ -n "$TINYLINUXDIR" ] || return 0
    [ -d "$TINYLINUXDIR/conf" ] || return 0

    local DIR
    for DIR in /etc/autofs /etc/conf.d /etc/bash /etc; do
        local FILE
        find "$DIR/" -maxdepth 1 -type f | while read FILE; do
            local SRC
            FILE=`basename "$FILE"`
            SRC="$TINYLINUXDIR/conf/$FILE"
            if [ -f "$SRC" ]; then
                echo "Copying $SRC to $DIR/$FILE"
                mkdir -p "$DIR"
                tr -d '\r' < "$SRC" > "$DIR/$FILE"
            fi
        done
    done

    if [ -f "$TINYLINUXDIR/udhcpd.conf" ]; then
        echo "Copying $TINYLINUXDIR/udhcpd.conf to /etc/udhcpd.conf"
        tr -d '\r' < "$TINYLINUXDIR/udhcpd.conf" > /etc/udhcpd.conf
    fi

    if [ -f "$TINYLINUXDIR/asound.state" ]; then
        echo "Copying $TINYLINUXDIR/asound.state to /etc/asound.state"
        cp "$TINYLINUXDIR/asound.state" /etc/asound.state
    fi
}

# Get boot order file
__BOOT_ORDER_WARNING_PRINTED=0
__get_boot_file()
{
    local CMDLINE
    local BOOT_ORDER
    local FILE
    local WARNING

    BOOT_ORDER="/etc/conf.d/boot"

    CMDLINE="$(cat /proc/cmdline)"
    if echo "$CMDLINE" | grep -q "boot_order="; then
        FILE="$(echo "$CMDLINE" | sed "s/.*boot_order=// ; s/ .*//")"
        if [ -e "/etc/conf.d/$FILE" ]; then
            BOOT_ORDER="/etc/conf.d/$FILE"
            WARNING="Using boot order override: $BOOT_ORDER"
        else
            WARNING="Boot order override /etc/conf.d/$FILE not found, using $BOOT_ORDER"
        fi
        if [ "$__BOOT_ORDER_WARNING_PRINTED" = "0" ]; then
            echo "$WARNING" >&2
            logger -p 24.4 -t rc "$WARNING"
            __BOOT_ORDER_WARNING_PRINTED=1
        fi
    fi

    echo "$BOOT_ORDER"
}

# Print services in boot order
__get_boot_services()
{
    local BOOT_ORDER
    BOOT_ORDER="$(__get_boot_file)"
    cat "$BOOT_ORDER"
}

# Get service status on boot
__get_boot_status()
{
    local __BOOT_STATUS
    __BOOT_STATUS="enabled"
    __get_boot_services | grep -q "^$1$" || __BOOT_STATUS="disabled"
    echo "$__BOOT_STATUS"
}

# Change text color based on value, if colors are enabled
__make_color()
{
    if [ "$1" = "$2" ] && [ "$NOCOLOR" != "1" ]; then
        echo "\033[$3m$1\033[0m"
    else
        echo "$1"
    fi
}

# Add drivers for devices
__coldplug()
{
    [ $# -eq 1 ] && echo "$1" | grep -q '/\*/uevent' && return 0

    while [ $# -gt 0 ]; do
        echo add > "$1"
        shift
    done
}

# Find TinyLinux configuration files
if [ -d "`/usr/bin/tinydir`" ]; then
    TINYLINUXDIR="`/usr/bin/tinydir`"
    export TINYLINUXDIR
fi

# Kill children on exit
trap "trap - SIGTERM && kill -- -$$ 2>/dev/null >/dev/null" SIGINT SIGTERM EXIT

# Run a script
__SVCNAME=`basename "$1"`
if [ -x "/etc/init.d/$__SVCNAME" -a "$2" -a "$#" = 2 ]; then

    # Load config file
    __CFGFILE="/etc/conf.d/$__SVCNAME"
    [ -f "$__CFGFILE" ] && . "$__CFGFILE"

    # Load script file
    DEPENDS=""
    . "/etc/init.d/$__SVCNAME"

    # Get current status
    __STATUS=`__getstatus "$__SVCNAME"`

    # Execute command
    case "$2" in
        start|silentstart)
            if [ "$__STATUS" != "stopped" ]; then
                [ "$2" = "silentstart" ] || echo "Service $__SVCNAME is already started"
            else
                __startservice
            fi
            ;;

        stop)
            if [ "$__STATUS" = "stopped" ]; then
                echo "Service $__SVCNAME is already stopped"
            else
                __stopservice
            fi
            ;;

        restart)
            cp "$__STATUSDIR/.order" "$__STATUSDIR/.order_old"
            if [ "$__STATUS" != "stopped" ]; then
                __stopservice || exit $?
            fi
            __startservice || exit $?

            # Restore previous service order if service has started successfuly
            if grep -q "^$__SVCNAME\$" "$__STATUSDIR/.order_old"; then
                mv "$__STATUSDIR/.order_old" "$__STATUSDIR/.order"
            else
                rm "$__STATUSDIR/.order_old"
            fi
            ;;

        zap)
            sed -i "/^$__SVCNAME\$/d" "$__STATUSDIR/.order"
            echo "stopped" > "$__STATUSDIR/$__SVCNAME"
            logger -p 24.5 -t "rc.$__SVCNAME" "Zapped"
            ;;

        status)
            [ "$__STATUS" != "started" ] || __STATUS="running"
            echo -e "status: $(__make_color $__STATUS running "1;32")"
            echo -e "boot:   $(__make_color $(__get_boot_status $__SVCNAME) enabled "1")"
            ;;
    esac

# Overall status
elif [ "$1" = "status" ]; then
    find /etc/init.d/ -type f | sort | while read __SVC; do
        __SVCNAME=$(basename "$__SVC")
        __STATUS=$(__getstatus "$__SVCNAME")
        [ "$__STATUS" != "started" ] || __STATUS="running"
        __BOOT_STATUS=$(__get_boot_status "$__SVCNAME")
        __STATUS=$(__make_color "$__STATUS" running "1;32")
        __BOOT_STATUS=$(__make_color "$__BOOT_STATUS" enabled "1")
        __PADDING="            "
        echo -e "$__SVCNAME${__PADDING:${#__SVCNAME}} $__STATUS    $__BOOT_STATUS"
    done

# Enable services
elif [ "$1" = "enable" ]; then

    shift
    while [ $# -gt 0 ]; do

        # Check if such service exists
        if [ ! -f "/etc/init.d/$1" ]; then
            echo "Service $1 not found!" >&2
            exit 1
        fi

        # Attempt to start the service
        /etc/init.d/$1 start || exit $?

        # Add service to boot list
        if [ "$(__get_boot_status $1)" = "enabled" ]; then
            echo "Service $1 is already enabled" >&2
        else
            echo "$1" >> "$(__get_boot_file)"
            echo "Enabled service $1"
        fi

        # Next service
        shift
    done

    # Prevent losing data during accidental reboot
    sync

# Disable services
elif [ "$1" = "disable" ]; then

    shift
    while [ $# -gt 0 ]; do

        # Check if such service exists
        if [ ! -f "/etc/init.d/$1" ]; then
            echo "Service $1 not found!" >&2
            exit 1
        fi

        # Attempt to stop the service
        /etc/init.d/$1 stop

        # Remove service from boot list
        if [ "$(__get_boot_status $1)" = "enabled" ]; then
            sed -i "/^$1$/d" "$(__get_boot_file)"
            echo "Disabled service $1"
        else
            echo "Service $1 is already disabled" >&2
        fi

        # Next service
        shift
    done

    # Prevent losing data during accidental reboot
    sync

# Start/stop/restart/zap services
elif [ "$1" = "start" ] || [ "$1" = "stop" ] || [ "$1" = "restart" ] || [ "$1" = "zap" ]; then

    ACTION="$1"
    shift
    while [ $# -gt 0 ]; do

        # Check if such service exists
        if [ ! -f "/etc/init.d/$1" ]; then
            echo "Service $1 not found!" >&2
            exit 1
        fi

        # Attempt to stop the service
        /etc/init.d/$1 "$ACTION"

        # Next service
        shift
    done

# System init
elif [ "$1" = "sysinit" ]; then

    # Remount root as rw if necessary
    mount -t proc proc /proc
    if grep -q " rootfs.*ro" /proc/mounts; then
        echo "Remounting root read-write"
        mount -o remount,rw rootfs /
    fi

    # Mount basic filesystems
    mount -t sysfs sysfs /sys
    mount -t devtmpfs -o "mode=0755" devtmpfs /dev
    [ -d /dev/pts ] || mkdir -m 0755 /dev/pts
    [ -d /dev/shm ] || mkdir -m 1777 /dev/shm
    mount -t devpts -o "mode=0620,gid=5" devpts /dev/pts
    [ -d /sys/firmware/efi/efivars ] && grep -q efivarfs /proc/filesystems && mount -t efivarfs efivarfs /sys/firmware/efi/efivars

    # Create symlinks used by shell's redirection
    ln -s /proc/self/fd /dev/fd
    ln -s /proc/self/fd/0 /dev/stdin
    ln -s /proc/self/fd/1 /dev/stdout
    ln -s /proc/self/fd/2 /dev/stderr

    # Create firmware directory if needed
    VAR_FIRMWARE="$(readlink /lib/firmware)"
    if [ "$VAR_FIRMWARE" = "/var/firmware" ]; then
        # Use existing firmware directory, if present
        if [ -d "$TINYLINUXDIR"/firmware ]; then
            ln -s "$TINYLINUXDIR"/firmware /var/firmware
        else
            mkdir -p /var/firmware
        fi
    fi

    # Setup hotplug
    touch /dev/mdev.seq
    echo "/usr/bin/mdev" > /proc/sys/kernel/hotplug

    # Initialize device node ownership/permissions through mdev
    /usr/bin/mdev -s

    # Coldplug devices
    if ! grep -q "nocoldplug" /proc/cmdline; then
        for BUS in $(cat /etc/coldplug); do
            __coldplug /sys/bus/$BUS/devices/*/uevent
        done
        __coldplug /sys/block/*/uevent
        __coldplug /sys/block/*/*/uevent
    fi

# Boot services
elif [ "$1" = "boot" ]; then

    # Measure time
    START_TIME=$(uptime_ms)

    # Create status directory
    [ -d "$__STATUSDIR" ] && rm -rf "$__STATUSDIR"
    mkdir -p "$__STATUSDIR"

    # Create run directory
    [ -d /run ] || mkdir /run
    [ -e /var/run ] || ln -s /run /var/run

    # Remove stale files from before boot
    rm -f /var/run/*

    # Create lock directory
    if [ ! -d /run/lock ]; then
        mkdir /run/lock
        chmod 1777 /run/lock
    fi
    ln -s /run/lock /var/lock

    # Mount debug fs if it is available
    grep -q debugfs /proc/filesystems && [ -d /sys/kernel/debug ] && mount -t debugfs debugfs /sys/kernel/debug

    # Migrate old configuration
    __migrate_config

    # Start boot services
    __get_boot_services | while read __SVCNAME; do
        if [ -f "/etc/init.d/$__SVCNAME" ]; then
            "/etc/init.d/$__SVCNAME" silentstart
        else
            echo "Service $__SVCNAME not found"
            logger -p 24.3 -t rc "Service $__SVCNAME not found"
        fi
    done

    # Display boot time statistics
    TOTAL_BOOT_TIME=$(uptime_ms)
    if [ -f /var/log/kernel_boot_time ]; then
        KERNEL_BOOT_TIME=$(cat /var/log/kernel_boot_time)
    else
        KERNEL_BOOT_TIME=$START_TIME
    fi
    INIT_TIME=$(($START_TIME - $KERNEL_BOOT_TIME))
    SERVICES_BOOT_TIME=$(($TOTAL_BOOT_TIME - $START_TIME))
    STATS="kernel $(time_in_s $KERNEL_BOOT_TIME)s, init $(time_in_s $INIT_TIME)s, services $(time_in_s $SERVICES_BOOT_TIME)s, total $(time_in_s $TOTAL_BOOT_TIME)s"
    echo "[$STATS]"
    logger -p 24.6 -t rc "System booted: $STATS"

# Shutdown
elif [ "$1" = "shutdown" ]; then
    tac < "$__STATUSDIR/.order" | while read __SVCNAME; do
        "/etc/init.d/$__SVCNAME" stop
    done
    sync

else
    echo "Invalid command: $1" >&2
fi
