#!/usr/bin/sh

# Copyright (c) 2009-2019, NVIDIA CORPORATION.  All rights reserved.
# See /etc/LICENSE file for details.

set -e

die()
{
    echo "$@"
    exit 1
}

print_usage()
{
    echo "Usage: installtiny [OPTIONS] /dev/sdx"
    echo
    echo "Options:"
    echo "  -r         Use ReiserFS instead of default F2FS for root partition"
    echo "  -f FILE    Unpack TinyLinux from zip file"
    echo
    exit 1
}

##############################################################################
# Check if required tools exist

check_tool()
{
    [ -x "$1" ] || die "Error: $1 not found"
}

check_tool /usr/bin/parted
check_tool /usr/bin/mkfs.vfat
check_tool /usr/bin/mkfs.reiser

##############################################################################
# Handle command line args

PACKAGE=""
FS=f2fs
FS_REASON=""
if [ "$(which mkfs.f2fs 2>&1)" = "" ]; then
    FS=reiser
    FS_REASON="mkfs.f2fs not found, falling back to ReiserFS"
fi
if ! grep -q "\<f2fs\>" /proc/filesystems; then
    FS=reiser
    FS_REASON="f2fs not found in /proc/filesystems, falling back to ReiserFS"
fi

while [ $# -gt 1 ]; do
    case "$1" in
        -h) print_usage ;;
        -r) FS=reiser ;;
        -f) shift
            PACKAGE="$1"
            [ "$PACKAGE" ] || die "Error: Missing package filename"
            [ -f "$PACKAGE" ] || die "Error: Missing package file $PACKAGE"
            ;;
        *) die "Error: Unrecognized parameter - $1"
    esac
    shift
done

##############################################################################
# Perform sanity checks

[ $# -eq 1 ] || print_usage

[ -b $1 ] || die "Error: $1 is not a block device"

PARTITION="/sys/class/block/${1#/dev/}/partition"
[ ! -f "$PARTITION" ] || [ "$(cat "$PARTITION")" = "0" ] || die "Error: $1 is a partition"

[ $(id -u) = 0 ] || die "Error: This program requires root privileges"

##############################################################################
# Print info and ask the user one last time

echo
echo "Installing TinyLinux to $1"
echo

parted "$1" print

echo
echo "Do you want to continue? [y|n]"
RESPONSE=
read RESPONSE
[ "$RESPONSE" = "y" ] || die "Exiting"
echo

##############################################################################
# Set up partitions

# Restore hotplug on exit
HOTPLUG="$(cat /proc/sys/kernel/hotplug)"
cleanup()
{
    [ -z "$HOTPLUG" ] || echo "$HOTPLUG" > /proc/sys/kernel/hotplug
}

# Disable hotplug
echo "" > /proc/sys/kernel/hotplug

# Unmount any partitions from the target drive
if grep -q "^$1" /proc/mounts; then
    for PARTITION in $(grep "^$1" /proc/mounts | awk '{print $2}'); do
        echo "Unmounting $PARTITION"
        umount $PARTITION
        sync
    done
fi

echo "Creating partitions..."

# Clear any existing partitions and data
dd if=/dev/zero of="$1" bs=1M count=1

# Create GPT partition table and partitions
parted -s "$1" \
    mklabel gpt \
    mkpart boot 2048s 64m \
    set 1 boot on \
    set 1 esp on \
    mkpart root 64m 100% \
    print

# Write all data to the drive
sync

[ -z "$FS_REASON" ] || echo "$FS_REASON"

# Detect partition devices
PART1="$1"1
PART2="$1"2
[ -b $PART1 ] || PART1="$1"p1
[ -b $PART2 ] || PART2="$1"p2
[ -b $PART1 ] || die "Error: Boot partition not created as expected"
[ -b $PART2 ] || die "Error: Root partition not created as expected"

# Create filesystems in partitions
mkfs.vfat -n BOOT "$PART1"
mkfs.$FS -f -l root "$PART2"

# Write all data to the drive
sync

# Restore hotplug
echo "$HOTPLUG" > /proc/sys/kernel/hotplug
HOTPLUG=""

# Perform coldplug
ls /sys/bus/pci/devices/*/uevent /sys/bus/usb/devices/*/uevent /sys/block/*/uevent /sys/block/*/*/uevent | while read UEVENT; do
    echo "add" > "$UEVENT"
done

# Wait for partitions to appear
echo "Waiting for partitions to be auto-mounted..."
WAIT=30 # in seconds
while true; do
    [ $WAIT -gt 0 ] || die "Failed to auto-mount created partitions"
    grep -q "^$PART1 " /proc/mounts && grep -q "^$PART2 " /proc/mounts && break
    sleep 1
    WAIT=$(($WAIT - 1))
done

##############################################################################
# Install TinyLinux

echo "Copying data..."

# Locate boot partition
if [ -d /boot/tiny ]; then
    BOOT=/boot
else
    BOOT=/mnt/nv
fi

TARGET_BOOT="${PART1/dev/media}"
TARGET_ROOT="${PART2/dev/media}"

if [ "$PACKAGE" ] && [ -f "$PACKAGE" ]; then
    # Unpack TinyLinux package
    unzip "$PACKAGE" -d "$TARGET_ROOT"

    # Populate boot partition
    mv "$TARGET_ROOT"/EFI "$TARGET_ROOT"/syslinux "$TARGET_BOOT"
    mkdir "$TARGET_BOOT"/tiny
    mv "$TARGET_ROOT"/tiny/kernel "$TARGET_ROOT"/tiny/initrd "$TARGET_BOOT"/tiny
else
    # Populate boot partition
    cp -a "$BOOT"/EFI "$BOOT"/syslinux "$TARGET_BOOT"
    mkdir "$TARGET_BOOT"/tiny
    cp "$BOOT"/tiny/kernel "$BOOT"/tiny/initrd "$TARGET_BOOT"/tiny

    # Populate root partition
    cp -a /mnt/nv/tiny "$TARGET_ROOT"
    rm -f "$TARGET_ROOT"/tiny/kernel "$TARGET_ROOT"/tiny/initrd
    mkdir "$TARGET_ROOT"/home
fi

# Configure bootloader for initrd to find the root partition quicker
sed -i '/default/s/$/ partno=2/' "$TARGET_BOOT"/syslinux/syslinux.cfg

sync

echo
echo "Done!"
