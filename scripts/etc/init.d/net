#!/usr/bin/rc

# Copyright (c) 2009-2020, NVIDIA CORPORATION.  All rights reserved.
# See /etc/LICENSE file for details.

# File to store the started interface name
SAVED_IFACE_FILE="/var/run/net.iface"

# Process kernel arguments
parse_opt()
{
    echo "$1" | cut -f 2- -d '='
}
for ARG in `cat /proc/cmdline`; do
    #echo "Parsing option $ARG"
    case "$ARG" in
        net\=*) IFACE=`parse_opt "$ARG"` ;;
        staticip\=*) STATICIP=`parse_opt "$ARG"` ;;
        gateway\=*) GATEWAY=`parse_opt "$ARG"` ;;
        dns\=*) DNS=`parse_opt "$ARG" | sed "s/,/ /g"` ;;
        dnsdomain\=*) DNSDOMAIN=`parse_opt "$ARG"` ;;
        nfsshare\=*) IFACE="none" ;; # DHCP already done
    esac
done

WIRELESS_UP=""

setup_wlan()
{
    [ -z "$WIRELESS_UP" ] || return
    [ -n "$WIRELESS_NETWORK" ] || return
    [ -d "/sys/class/net/$1/wireless" ] || return

    info "connecting $1 to $WIRELESS_NETWORK"
    [ -z "$WIRELESS_PASSWORD" ] || WIRELESS_KEY="s:$WIRELESS_PASSWORD"
    iwconfig "$1" essid "$WIRELESS_NETWORK" key "$WIRELESS_KEY" mode "$WIRELESS_MODE"

    WIRELESS_UP="$1"
}

bring_down_ifaces()
{
    local IIFACE
    # Bring down all the interfaces brought up
    for IIFACE in $1; do
        if [ "$IIFACE" != "$2" ]; then
            ifconfig "$IIFACE" down
        fi
    done
}

start()
{
    if [ $IFACE = "auto" ]; then
        local LOOP=0
        local FOUND_IFACE
        local IFACES_BROUGHT_UP
        while [ $LOOP -lt $((TIMEOUT * 2)) ]; do
            local IIFACE
            for IIFACE in $(ls /sys/class/net); do
                [ "$IIFACE" != 'lo' ] || continue
                setup_wlan "$IIFACE"
                [ -f "/sys/class/net/$IIFACE/carrier" ] || continue
                local IFACELINKSTATUS
                IFACELINKSTATUS=$(cat "/sys/class/net/$IIFACE/carrier" 2>/dev/null)
                if [ $? = 1 ]; then
                    # Exit code 1 indicates that interface is not up, so bring it up
                    if ! echo "$IFACES_BROUGHT_UP" | grep -w -q "$IIFACE"; then
                        ifconfig "$IIFACE" up
                        IFACES_BROUGHT_UP="$IFACES_BROUGHT_UP $IIFACE"
                        # Reset timeout timer every time we detect a new interface
                        [ $LOOP -le 2 ] || LOOP=2
                    fi
                elif [ "$IFACELINKSTATUS" = 1 ]; then
                    # If the interface was already brought up by linuxrc, use it
                    if ifconfig "$IIFACE" | grep -q "inet addr"; then
                        echo "$IIFACE" > "$SAVED_IFACE_FILE"
                        bring_down_ifaces "$IFACES_BROUGHT_UP" "$IIFACE"
                        return 0
                    fi

                    FOUND_IFACE="$IIFACE"
                    info "auto-detected $FOUND_IFACE"
                    break
                fi
            done

            # Break if the IFACE has been found
            [ -z $FOUND_IFACE ] || break

            [ $LOOP = 1 ] && info "waiting for link"
            [ $LOOP -gt 1 ] && echo "." >&3
            sleep 0.5
            LOOP=$(($LOOP + 1))
        done

        bring_down_ifaces "$IFACES_BROUGHT_UP" "$FOUND_IFACE"

        if [ -z "$FOUND_IFACE" ]; then
            error "no cable detected on$IFACES_BROUGHT_UP"
            return 1
        fi
        IFACE="$FOUND_IFACE"
    fi

    # Wait for the network interface if it does not exist
    if [ ! -d "/sys/class/net/$IFACE" -a -n "$TIMEOUT" ]; then
        info "waiting for $IFACE"
        local LOOP=0
        while [ $LOOP -lt $((TIMEOUT * 2)) ]; do
            [ ! -d "/sys/class/net/$IFACE" ] || break
            LOOP=$(($LOOP + 1))
            sleep 0.5
            echo "." >&3
        done
    fi

    # Bring up networking
    if [ -d "/sys/class/net/$IFACE" ]; then
        logger -p 24.5 -t rc.net "Configuring $IFACE"
        if [ "$STATICIP" ]; then
            NETMASK=`echo "$STATICIP" | cut -f 2 -d '/'`
            STATICIP=`echo "$STATICIP" | cut -f 1 -d '/'`
            [ "$NETMASK" ] || STATICIP=""
        fi
        setup_wlan "$IFACE"
        if [ "$STATICIP" ]; then
            info "static IP $STATICIP"

            # Set up IP
            ifconfig "$IFACE" "$STATICIP" netmask "$NETMASK"
            ifconfig "$IFACE" up

            # Set up gateway
            [ "$GATEWAY" ] && route add default gw "$GATEWAY"

            # Set up DNS
            if [ "$DNSDOMAIN" ]; then
                [ -f /etc/resolv.conf ] && rm /etc/resolv.conf
                touch /etc/resolv.conf
                if [ "$DNSDOMAIN" ]; then
                    echo "domain $DNSDOMAIN" >> /etc/resolv.conf
                    echo "search $DNSDOMAIN" >> /etc/resolv.conf
                fi
                for DNSSERVER in $DNS; do
                    echo "nameserver $DNSSERVER" >> /etc/resolv.conf
                done
            fi
        else
            info "DHCP"
            [ -f /etc/resolv.conf ] && rm /etc/resolv.conf
            ifconfig "$IFACE" up
            [ "$BACKGROUND_UDHCPC" = "1" ] && UDHCPC_OPTIONS="-b $UDHCPC_OPTIONS"
            /usr/bin/udhcpc -i "$IFACE" -s "/etc/udhcpc.scripts" $UDHCPC_OPTIONS
        fi

        # Store the interface name to file
        echo "$IFACE" > "$SAVED_IFACE_FILE"
    else
        info "missing $IFACE"
        return 1
    fi
}

stop()
{
    # Read the interface that was started using start
    [ ! -f /var/run/net.iface ] || IFACE="$(cat "$SAVED_IFACE_FILE")"

    # Bring down networking
    if [ -d "/sys/class/net/$IFACE" ]; then
        # Clear the IP address set, IFACE=auto mode shouldn't use the previous IP and return
        # Sometimes the user may want to change the IP, so user may run restart
        ifconfig "$IFACE" 0.0.0.0
        ifconfig "$IFACE" down
        /usr/bin/start-stop-daemon --stop --exec /usr/bin/udhcpc
        true
    fi
}
