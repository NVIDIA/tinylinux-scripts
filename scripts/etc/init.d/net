#!/usr/bin/rc

# SPDX-License-Identifier: BSD-3-Clause
# SPDX-FileCopyrightText: Copyright (c) 2009-2023, NVIDIA CORPORATION.  All rights reserved.
# See /etc/LICENSE file for details.

# File to store the started interface name
SAVED_IFACE_FILE="/var/run/net.iface"

# Process kernel arguments
parse_opt()
{
    echo "$1" | cut -f 2- -d '='
}
for ARG in `cat /proc/cmdline`; do
    #echo "Parsing option $ARG"
    case "$ARG" in
        net\=*) IFACE="${ARG#*=}" ;;
        staticip\=*) STATICIP="${ARG#*=}" ;;
        gateway\=*) GATEWAY="${ARG#*=}" ;;
        dns\=*) DNS="${ARG#*=}" ; DNS="${DNS//,/ }" ;;
        dnsdomain\=*) DNSDOMAIN="${ARG#*=}" ;;
        nfsshare\=*) IFACE="none" ;; # DHCP already done
        BOOTIF\=*) IFACEMAC=$(echo "${ARG#*=}" | tr '[A-Z]' '[a-z]') ;;
    esac
done

WIRELESS_UP=""

setup_wlan()
{
    [ -z "$WIRELESS_UP" ] || return
    [ -n "$WIRELESS_NETWORK" ] || return
    [ -d "/sys/class/net/$1/wireless" ] || return

    info "connecting $1 to $WIRELESS_NETWORK"
    [ -z "$WIRELESS_PASSWORD" ] || WIRELESS_KEY="s:$WIRELESS_PASSWORD"
    iwconfig "$1" essid "$WIRELESS_NETWORK" key "$WIRELESS_KEY" mode "$WIRELESS_MODE"

    WIRELESS_UP="$1"
}

has_carrier()
{
    [ -f "/sys/class/net/$1/carrier" ] || return 1
    local CARRIER=$(cat "/sys/class/net/$1/carrier" 2>/dev/null || true)
    [ "$CARRIER" = "1" ]
}

bring_down_ifaces()
{
    [ -n "$1" ] || return 0

    # Bring down all the interfaces brought up
    local IIFACE
    for IIFACE in $1; do
        local BRING_DOWN=1
        if [ -n "$2" ]; then
            local JIFACE
            for JIFACE in $2; do
                if [ "$IIFACE" == "$2" ]; then
                    BRING_DOWN=""
                    break
                fi
            done
        fi
        if [ -n "$BRING_DOWN" ]; then
            ifconfig "$IIFACE" down
        fi
    done
}

get_iface_from_mac()
{
    local IFACEMAC="$1"
    local LOOP=0
    while [ $LOOP -lt $((TIMEOUT * 2)) ]; do
        local IIFACE
        for IIFACE in $(ls /sys/class/net); do
            [ -f "/sys/class/net/$IIFACE/address" ] || continue
            local CURMAC=$(cat "/sys/class/net/$IIFACE/address" | tr '[A-Z]' '[a-z]')
            if [ "$CURMAC" = "$IFACEMAC" ]; then
                IFACE="$IIFACE"
                return 0
            fi
        done
        [ -e "/sys/class/net/$IFACE" ] && break
        LOOP=$((LOOP + 1))
        info "waiting for $IFACEMAC"
        sleep 0.5
    done
    return 1
}

start()
{
    TIMEOUT=${TIMEOUT:-1}

    if [ -n "${IFACEMAC:-}" ] && ! get_iface_from_mac "$IFACEMAC"; then
        error "interface not found"
        return 1
    fi

    if [ $IFACE = "auto" ]; then
        local LOOP=0
        local FOUND_IFACES
        local CARRIER_IFACES
        local IFACES_BROUGHT_UP
        while [ $LOOP -lt $((TIMEOUT * 2)) ]; do
            FOUND_IFACES=""
            CARRIER_IFACES=""
            local IIFACE
            for IIFACE in $(ls /sys/class/net); do
                [ "$IIFACE" != 'lo' ] || continue
                setup_wlan "$IIFACE"
                [ -f "/sys/class/net/$IIFACE/carrier" ] || continue
                FOUND_IFACES="$FOUND_IFACES $IIFACE"
                local IFACELINKSTATUS
                IFACELINKSTATUS=$(cat "/sys/class/net/$IIFACE/carrier" 2>/dev/null)
                if [ $? = 1 ]; then
                    # Exit code 1 indicates that interface is not up, so bring it up
                    if ! echo "$IFACES_BROUGHT_UP" | grep -w -q "$IIFACE"; then
                        ifconfig "$IIFACE" up
                        IFACES_BROUGHT_UP="$IFACES_BROUGHT_UP $IIFACE"
                        # Reset timeout timer every time we detect a new interface
                        [ $LOOP -le 2 ] || LOOP=2
                    fi
                elif [ "$IFACELINKSTATUS" = 1 ]; then
                    # If the interface was already brought up by somebody, use it
                    if ifconfig "$IIFACE" | grep -q "inet addr"; then
                        bring_down_ifaces "$IFACES_BROUGHT_UP" "$IIFACE"
                        info "reusing $IIFACE"
                        echo "$IIFACE" > "$SAVED_IFACE_FILE"
                        return 0
                    fi

                    CARRIER_IFACES="$CARRIER_IFACES $IIFACE"
                fi
            done

            # Break if the IFACE has been found
            if [ -n "$CARRIER_IFACES" ]; then
                info "auto-detected$FOUND_IFACES"
                break
            fi

            [ $LOOP = 1 ] && info "waiting for link"
            [ $LOOP -gt 1 ] && echo -n "." >&3
            sleep 0.5
            LOOP=$(($LOOP + 1))
        done

        if [ -z "$FOUND_IFACES" ]; then
            error "no interfaces found"
            return 1
        fi

        if [ "$STATICIP" ]; then
            IFACE="${CARRIER_IFACES# }"
            # Leave only the first interface found
            [ "$IFACE" = "${IFACE%% *}" ] || info "using ${IFACE%% *}"
            IFACE="${IFACE%% *}"
            bring_down_ifaces "$IFACES_BROUGHT_UP" "$IFACE"
        else
            IFACE="${FOUND_IFACES# }"
        fi

        if [ -z "$CARRIER_IFACES" ]; then
            error "no carrier detected on$FOUND_IFACES"
            [ "$STATICIP" ] && return 1
        fi
    fi

    local NUM_IFACES=$(echo "$IFACE" | wc -w)

    # Wait for the network interface if it does not exist
    if [ $NUM_IFACES -eq 1 ] && [ ! -d "/sys/class/net/$IFACE" ]; then
        info "waiting for $IFACE"
        local LOOP=0
        while [ $LOOP -lt $((TIMEOUT * 2)) ]; do
            [ ! -d "/sys/class/net/$IFACE" ] || break
            LOOP=$(($LOOP + 1))
            sleep 0.5
            echo -n "." >&3
        done
    fi

    # Fail if interface explicitly requested by user does not exist
    if [ $NUM_IFACES -eq 1 ] && [ ! -d "/sys/class/net/$IFACE" ]; then
        info "missing $IFACE"
        return 1
    fi

    # Bring up networking
    logger -p 24.5 -t rc.net "Configuring $IFACE"
    if [ "$STATICIP" ]; then
        NETMASK=`echo "$STATICIP" | cut -f 2 -d '/'`
        STATICIP=`echo "$STATICIP" | cut -f 1 -d '/'`
        [ "$NETMASK" ] || STATICIP=""
    fi
    setup_wlan "$IFACE"
    if [ "$STATICIP" ]; then
        info "static IP $STATICIP"

        # Set up IP
        ifconfig "$IFACE" "$STATICIP" netmask "$NETMASK"
        ifconfig "$IFACE" up

        # Set up gateway
        [ "$GATEWAY" ] && route add default gw "$GATEWAY"

        # Set up DNS
        if [ "$DNSDOMAIN" ]; then
            [ -f /etc/resolv.conf ] && rm /etc/resolv.conf
            touch /etc/resolv.conf
            if [ "$DNSDOMAIN" ]; then
                echo "domain $DNSDOMAIN" >> /etc/resolv.conf
                echo "search $DNSDOMAIN" >> /etc/resolv.conf
            fi
            for DNSSERVER in $DNS; do
                echo "nameserver $DNSSERVER" >> /etc/resolv.conf
            done
        fi
    else
        info "DHCP on"
        [ -f /etc/resolv.conf ] && rm /etc/resolv.conf
        local IIFACE
        for IIFACE in $IFACE; do
            ifconfig "$IIFACE" up
            if has_carrier "$IIFACE"; then
                info "${IIFACE}*"
                /usr/bin/udhcpc -i "$IIFACE" -s "/etc/udhcpc.scripts" $UDHCPC_OPTIONS >/dev/null 2>/dev/null
            else
                info "$IIFACE"
                /usr/bin/start-stop-daemon --start --background --exec /usr/bin/udhcpc -- -i "$IIFACE" -s "/etc/udhcpc.scripts" $UDHCPC_OPTIONS
            fi
        done
    fi

    # Store the interface name to file
    echo "$IFACE" > "$SAVED_IFACE_FILE"
}

stop()
{
    # Read the interface that was started using start
    local ACTIVE_IFACES="$IFACE"
    [ ! -f "$SAVED_IFACE_FILE" ] || ACTIVE_IFACES="$(cat "$SAVED_IFACE_FILE")"
    [ "$ACTIVE_IFACES" ] || return 0
    info "bringing down $ACTIVE_IFACES"

    /usr/bin/start-stop-daemon --stop --exec /usr/bin/udhcpc

    # Bring down networking
    local IIFACE
    for IIFACE in $ACTIVE_IFACES; do
        if [ -d "/sys/class/net/$IIFACE" ]; then
            # Clear the IP address set, IFACE=auto mode shouldn't use the previous IP and return
            # Sometimes the user may want to change the IP, so user may run restart
            ifconfig "$IIFACE" 0.0.0.0
            ifconfig "$IIFACE" down
        fi
    done

    rm -f "$SAVED_IFACE_FILE"
}
