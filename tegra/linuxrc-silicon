#!/tiny/busybox sh

# Copyright (c) 2009-2020, NVIDIA CORPORATION.  All rights reserved.
# See /etc/LICENSE file for details.

SQUASHFS_BIN="tiny/squash.bin"
LOOP="dev/loop0"
MNTSQUASH="mnt/squash"
NEWROOT="/mnt/root"
UUID="6cbfd9d7-fdea-487f-87fa-b521bfa4d71a"
NET="eth0"
NFSSHARE=""
BB="/tiny/busybox"

# Display startup info
echo "Booting TinyLinux"

# Mount devfs and procfs
$BB mount -t devtmpfs none /dev
$BB mount -t proc none /proc

# Take note of current time (kernel boot time)
KERNEL_BOOT_TIME=$($BB awk '{print $1*1000}' /proc/uptime)

# Parse kernel command line
for ARG in $($BB cat /proc/cmdline); do
    case "$ARG" in
        nfsshare\=*) NFSSHARE="${ARG#*=}" ;;
        net\=*)      NET="${ARG#*=}" ;;
    esac
done

# Create mount point for root partition
$BB mkdir -p "$NEWROOT"

# Load additional kernel modules
if [ -f /etc/modules ]; then
    for MODULE in $($BB grep -v "^ *#\|^ *$" /etc/modules); do
        echo "Loading $MODULE"
        $BB modprobe $MODULE
    done
fi

# Mount sysfs for NFS boot
if [ "$NFSSHARE" ]; then
    $BB mkdir -p /sys
    $BB mount -t sysfs none /sys
fi

# Locate and mount root partition
find_partition()
{
    $BB blkid | $BB grep "$UUID" | $BB cut -f 1 -d ':'
}
RETRYCOUNT=0
while true; do

    if [ "$NFSSHARE" ]; then
        if [ -e "/sys/class/net/$NET" ]; then
            echo "Obtaining DHCP lease for $NET..."
            $BB ifconfig "$NET" up || exec $BB sh
            if ! $BB udhcpc -n -T 1 -t 60 -q -i "$NET" 2>&1 | $BB tee /dhcp.txt; then
                echo "Failed to obtain IP from DHCP on $NET!"
                exec $BB sh
            fi
            if ! $BB ifconfig "$NET" | $BB grep -q "inet addr"; then
                # Workaround for certain Ethernet controllers
                IP=$($BB awk '/ obtained/ {print $4}' < /dhcp.txt)
                $BB ifconfig "$NET" up || exec $BB sh
                $BB ifconfig "$NET" "$IP" || exec $BB sh
                if ! $BB ifconfig "$NET" | $BB grep -q "inet addr"; then
                    echo "Failed to obtain IP from DHCP on $NET!"
                    exec $BB sh
                fi
            fi
            $BB rm /dhcp.txt
            $BB mount -t nfs -o nolock "$NFSSHARE" "$NEWROOT" || exec $BB sh
            break
        fi
    else
        PARTITION="$(find_partition)"
        if [ "$PARTITION" ]; then
            echo "Found partition: $PARTITION"
            $BB mount -o rw,noatime "$PARTITION" "$NEWROOT"
            break
        fi
    fi

    if [ $RETRYCOUNT -eq 0 ]; then
        [ "$NFSSHARE" ] && echo "Ethernet device $NET not found. Waiting..."
        [ -z "$NFSSHARE" ] && echo "Partition with root filesystem not found. Waiting..."
    fi
    WAITTIME=$(($($BB awk '{print $1*1000}' /proc/uptime) - $KERNEL_BOOT_TIME))
    if [ $WAITTIME -gt 10000 ]; then
        if [ "$NFSSHARE" ]; then
            echo "Ethernet device $NET not found!"
        else
            echo "Partition with UUID $UUID not found!"
            echo "Existing partitions:"
            $BB blkid
        fi
        exec $BB sh
    fi
    RETRYCOUNT=$(($RETRYCOUNT+1))
done

# Unmount devfs, procfs and sysfs
[ -z "$NFSSHARE" ] || $BB umount /sys
$BB umount /dev /proc

# Setup loop device
$BB losetup "$NEWROOT/$LOOP" "$NEWROOT/$SQUASHFS_BIN" || exec $BB sh

# Mount squashed filesystem
$BB mount -t squashfs -o ro "$NEWROOT/$LOOP" "$NEWROOT/$MNTSQUASH" || exec $BB sh

# Store kernel boot time for reporting in /usr/bin/rc
echo "$KERNEL_BOOT_TIME" > "$NEWROOT/var/log/kernel_boot_time"

# Switch root to the non-volatile partition
exec $BB switch_root -c /dev/console "$NEWROOT" /usr/bin/init

# Fallback - enter shell
exec $BB sh
